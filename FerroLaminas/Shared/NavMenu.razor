@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@using System.Net.Http
@using static FerroLaminas.Pages.FetchData
@using Newtonsoft.Json;
@using System.Text
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient httpClient

<nav class="navbar-mobile">
    <button class="@getMenuButtonClass()" @onclick="@setShowMenu">
        <div/>
        <div />
        <div />
    </button>
    <div>
        <AuthorizeView>
            <Authorized>
                <div class="user-content">
                    <p class="user-name">@context.User.Identity.Name</p>
                    <p class="user-name">@UserRol</p>
                    <button class="logout-button" @onclick="BeginLogOut">Log out</button>
                </div>
            </Authorized>
            <NotAuthorized>
                <a href="authentication/login">Log in</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="@isShowMenu()">
        <a href="/home">Home</a>
        <a href="/materiales">Materiales</a>
        <a href="/servicios">Servicios</a>
        <a href="/tipos-corte">Tipo de corte</a>
        <a href="/ordenes">Ordenes de Trabajo</a>
        <a href="/seguimientos">Seguimientos</a>
        <a href="/dashboard">Dashboard</a>
        @if (UserRol == "Cliente" || UserRol == "Vendedor")
        {
            <a href="/cotizaciones">Cotizaciones</a>
        }
    </div>
</nav>
<nav class="navbar">
    <div>
        <a href="/home">
            <img aria-live="polite" class="logo-navbar" src="/utils/logo-img.png" alt="Logo" />
        </a>
    </div>
    <div class="links">
        <a href="/materiales">Materiales</a>
        <a href="/servicios">Servicios</a>
        <a href="/tipos-corte">Tipo de corte</a>
        <a href="/ordenes">Ordenes de Trabajo</a>
        <a href="/seguimientos">Seguimientos</a>
        <a href="/dashboard">Dashboard</a>
        @if (UserRol == "Cliente" || UserRol == "Vendedor")
        {
            <a href="/cotizaciones">Cotizaciones</a>
        }
    </div>
    <div>
        <AuthorizeView>
            <Authorized>
                <div class="user-content">
                    <p class="user-name">@context.User.Identity.Name</p>
                    <p class="user-name">@UserRol</p>
                    <button class="logout-button" @onclick="BeginLogOut">Log out</button>
                </div>
            </Authorized>
            <NotAuthorized>
                <a href="authentication/login">Log in</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</nav>

@code {
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    public class User
    {
        public string email { get; set; }
        public string nombre { get; set; }
        public int IdUsuario { get; set; }
    }

    public class UserData
    {
        public User Data { get; set; }
    }

    public class Rol
    {
        public string id { get; set; }
        public string nombre { get; set; }
    }

    public class ApplicacionData
    {
        public Boolean ISONLINE { get; set; }
        public string path { get; set; }
    }

    private int menuSelected { get; set; }
    private bool showMenu { get; set; }
    private string UserName { get; set; }
    private string UserEmail { get; set; }
    private string UserRol { get; set; }
    private User UserResponse { get; set; }
    protected override void OnInitialized()
    {
        showMenu = false;
    }

    public void setShowMenu()
    {
        showMenu = !showMenu;
        StateHasChanged();
    }

    public string getMenuButtonClass()
    {
        if (!showMenu) return "menu-botton";

        return "menu-botton-active";
    }

    public string isShowMenu()
    {
        if (!showMenu) return "menu";

        return "menu-show";
    }

    public static class GlobalVariables
    {
        public static string path { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        ApplicacionData appData = new ApplicacionData();

        appData.ISONLINE = false;

        @if (appData.ISONLINE == true)
        {
            appData.path = "https://apiferrolaminas.azurewebsites.net/api";
        }
        else
        {
            appData.path = "https://localhost:7263/api";
        }

    UserName = user.Identity?.Name ?? "Usuario no autenticado";
        UserEmail = user.FindFirst(c => c.Type == "email")?.Value ?? "No email 2";
        getUser(appData);
    }

    private async Task getUser(ApplicacionData appData)
    {
        User nuevoUser = new User();
        nuevoUser.email = UserEmail;
        nuevoUser.nombre = UserName;
        var httpClient = new HttpClient();
        var content = new StringContent(JsonConvert.SerializeObject(nuevoUser), Encoding.UTF8, "application/json");
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "path", appData.path);
        var path = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "path");
        //produccion
        //var response = await httpClient.PostAsync("https://apiferrolaminas.azurewebsites.net/api/Auth/login", content);
        //desarollo
        // var response = await httpClient.PostAsync($"https://localhost:7263/api/Auth/login", content);
        var response = await httpClient.PostAsync($"{path}/Auth/login", content);

        if (response.IsSuccessStatusCode)
        {
            UserData data;
            var content2 = await response.Content.ReadAsStringAsync();
            data = JsonConvert.DeserializeObject<UserData>(content2);
            UserResponse = data.Data;
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "User", JsonConvert.SerializeObject(UserResponse));
            await getRol();
        } 
        else
        {
            Console.Write("Something Failed");
            UserRol = "No hay rol";
        }
        StateHasChanged();
    }

    private async Task getRol()
    {
        do
        {
            var httpClient = new HttpClient();
            //produccion
            //var response = await httpClient.GetAsync("https://apiferrolaminas.azurewebsites.net/api/Auth/rol/" + UserResponse.IdUsuario);
            //desarrollo
            var response = await httpClient.GetAsync("https://localhost:7263/api/Auth/rol/" + UserResponse.IdUsuario);

            if (response.IsSuccessStatusCode)
            {
                Rol RolResponse;
                var content = await response.Content.ReadAsStringAsync();
                RolResponse = JsonConvert.DeserializeObject<Rol>(content);
                UserRol = RolResponse.nombre ?? "No hay rol";
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "UserRol", JsonConvert.SerializeObject(RolResponse));
            }
            else
            {
                Console.Write("Something Failed");
                UserRol = "No hay rol";
            }
            StateHasChanged();

        } while (UserResponse.IdUsuario == 0);
    }

    public void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }
}
