@page "/ordenes/detalles/{id}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http
@using static FerroLaminas.Pages.FetchData
@using Newtonsoft.Json;
@using System.Text
@inject NavigationManager Navigation
@inject HttpClient httpClient

@code {
    [Parameter]
    public string id { get; set; }

    private List<Cotization> cotizations;
    private Cotization editCotization;
    private List<Operario> operarios;
    private OperarioData operariosData;
    private Order editOrder;
    string InitialDate;
    string FinalDate;


    protected override async Task OnInitializedAsync()
    {
        editOrder = new Order();
        cotizations = new List<Cotization>();
        operarios = new List<Operario>();
        operariosData = new OperarioData();
        editCotization = new Cotization();

        var httpClientCotization = new HttpClient();
        var path = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "path");
        //produccion
        //var response = await httpClient.GetAsync("https://apiferrolaminas.azurewebsites.net/api/Materiales");
        //desarrollo
        var responseCotization = await httpClientCotization.GetAsync($"{path}/Cotizaciones");

        if (responseCotization.IsSuccessStatusCode)
        {
            var content = await responseCotization.Content.ReadAsStringAsync();
            cotizations = JsonConvert.DeserializeObject<List<Cotization>>(content);
            List<Cotization> filteredItems = new List<Cotization>();
            foreach (var cotization in cotizations)
            {
                if (cotization.CotizacionFinalizada == true)
                {
                    filteredItems.Add(cotization);
                }
            }
            cotizations = filteredItems;
        }
        else
        {
            cotizations = new List<Cotization>();
        }

        var httpClient = new HttpClient();
        //produccion
        //var response = await httpClient.GetAsync("https://apiferrolaminas.azurewebsites.net/api/Servicios");
        //desarrollo
        var response = await httpClient.GetAsync($"{path}/Auth/Operarios");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            Console.WriteLine(content);
            operariosData = JsonConvert.DeserializeObject<OperarioData>(content);
            Console.WriteLine(operariosData);
            operarios = operariosData.Data;
        }
        else
        {

        }

        var httpClientOrder = new HttpClient();
        //produccion
        //var response = await httpClient.GetAsync("https://apiferrolaminas.azurewebsites.net/api/Materiales");
        //desarrollo
        var responseOrder = await httpClientOrder.GetAsync($"{path}/OrdenDeTrabajo/" + id);

        if (responseOrder.IsSuccessStatusCode)
        {
            var content = await responseOrder.Content.ReadAsStringAsync();
            editOrder = JsonConvert.DeserializeObject<Order>(content);
            Console.WriteLine("Get new Order" + editOrder);
            InitialDate = editOrder.FechaInicio;
            FinalDate = editOrder.FechaFin;
            
            if (DateTime.TryParseExact(InitialDate, "yyyy-MM-ddTHH:mm:ss", null, System.Globalization.DateTimeStyles.None, out DateTime fecha))
            {
                // Formatear la fecha según el formato deseado 'aaaa-mm-dd'
                InitialDate = fecha.ToString("yyyy-MM-dd");
            }
            else
            {
                // La cadena de fecha no está en el formato esperado
                InitialDate = "Formato de fecha no válido";
            }
            if (DateTime.TryParseExact(FinalDate, "yyyy-MM-ddTHH:mm:ss", null, System.Globalization.DateTimeStyles.None, out DateTime fechafinal))
            {
                // Formatear la fecha según el formato deseado 'aaaa-mm-dd'
                FinalDate = fechafinal.ToString("yyyy-MM-dd");
            }
            else
            {
                // La cadena de fecha no está en el formato esperado
                FinalDate = "Formato de fecha no válido";
            }
            Console.WriteLine("Date" + InitialDate + " " + FinalDate);
        }
        else
        {
            editOrder = new Order();
        }

        var httpClientCotizationEdit = new HttpClient();
        //produccion
        //var response = await httpClient.GetAsync("https://apiferrolaminas.azurewebsites.net/api/Materiales");
        //desarrollo
        var responseCotizationEdit = await httpClientCotizationEdit.GetAsync($"{path}/Cotizaciones/" + editOrder.CotizacionId);

        if (responseCotizationEdit.IsSuccessStatusCode)
        {
            var content = await responseCotizationEdit.Content.ReadAsStringAsync();
            editCotization = JsonConvert.DeserializeObject<Cotization>(content);
            Console.WriteLine("Get new cotitation" + editCotization);
        }
        else
        {
            editCotization = new Cotization();
        }
    }
}
<h3 class="cotizacion-title">Orden</h3>
<form class="cotizacion-form" onsubmit="@backHome">
    <div>
        <label for="cotazation">Cotización:</label>
        <select id="cotazation" name="cotazation" @onchange="@((e) => handleChange(e,"cotazation"))" required>
            @if (cotizations != null)
            {
                @foreach (var cotization in cotizations)
                {
                    @if (cotization.Id == editOrder.CotizacionId)
                    {
                    <option value="@cotization.Id">@cotization.Id</option>
                    }
                }
            }
        </select>
    </div>
    <div>
        <label for="operario">Operario:</label>
        <select id="operario" name="operario" @onchange="@((e) => handleChange(e,"operario"))" >
            @if (operarios != null)
            {
                @foreach (var operario in operarios)
                {
                    @if (operario.Id.ToString() == editOrder.OperarioId)
                    {
                        <option value="@operario.Id">@operario.Nombre</option>
                    }
                }
            }
        </select>
    </div>
    <div>
        <label for="fechaInicio">Fecha Incio:</label>
        <input type="date" id="fechaInicio" name="fechaInicio" value="@InitialDate" @onchange="@((e) => handleChange(e,"fechaInicio"))" readonly/>
    </div>
    <div>
        <label for="fechaFin">Fecha Fin:</label>
        <input type="date" id="fechaFin" name="fechaFin" value="@FinalDate" @onchange="@((e) => handleChange(e,"fechaFin"))" readonly />
    </div>

    <div>
        <label for="estado">Estado:</label>
        <input type="text" id="estado" name="estado" value="@editOrder.Estado" @onchange="@((e) => handleChange(e,"fechaFin"))" readonly />
    </div>

    <br />
    <div>
        <label for="cedula">Cedula:</label>
        <input type="number" id="cedula" name="cedula" value="@editCotization.ClienteId" @onchange="@((e) => handleChange(e,"cedula"))" readonly />
    </div>
    <div>
        <label for="proyect">Proyecto:</label>
        <input type="text" id="proyect" name="proyect" value="@editCotization.ProyectoId" @onchange="@((e) => handleChange(e,"proyect"))" readonly />
    </div>
    <div>
        <label for="precioTotal">Precio Total:</label>
        <input type="text" id="precioTotal" name="precioTotal" value="@editCotization.PrecioTotal" @onchange="@((e) => handleChange(e,"precioTotal"))" readonly />
    </div>
    <div>
        <label for="pesoLamina">Peso Lamina:</label>
        <input type="text" id="pesoLamina" name="pesoLamina" value="@editCotization.PesoLamina" @onchange="@((e) => handleChange(e,"pesoLamina"))" readonly />
    </div>
    <div>
        <label for="precioMaterial">Precio Material:</label>
        <input type="text" id="precioMaterial" name="precioMaterial" value="@editCotization.PrecioMaterial" @onchange="@((e) => handleChange(e,"precioMaterial"))" readonly />
    </div>
    <div>
        <label for="precioServicio">Precio Servicio:</label>
        <input type="text" id="precioServicio" name="precioServicio" value="@editCotization.PrecioServicio" @onchange="@((e) => handleChange(e,"precioServicio"))" readonly />
    </div>
    <div>
        <label for="usuarioId">Usuario Id:</label>
        <input type="number" id="usuarioId" name="usuarioId" value="@editCotization.UsuarioId" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>


    <div>
        <label for="nombre">Nombre:</label>
        <input type="text" id="nombre" name="nombre" value="@editCotization.Nombre" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>
    <div>
        <label for="telefono">Telefono:</label>
        <input type="text" id="telefono" name="telefono" value="@editCotization.Telefono" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>

    <div>
        <label for="direccion">Direccion:</label>
        <input type="text" id="direccion" name="direccion" value="@editCotization.Direccion" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>
    <div>
        <label for="email">Email:</label>
        <input type="text" id="email" name="email" value="@editCotization.Email" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>
    <div>
        <label for="ubicacion">Ubicación:</label>
        <input type="text" id="ubicacion" name="ubicacion" value="@editCotization.Ubicacion" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>
    <div>
        <label for="descripcion">Descripción:</label>
        <input type="text" id="descripcion" name="descripcion" value="@editCotization.DescripcionProyecto" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>
    <div>
        <label for="largo">Largo:</label>
        <input type="text" id="largo" name="largo" value="@editCotization.LargoProyecto" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>
    <div>
        <label for="ancho">Ancho:</label>
        <input type="text" id="ancho" name="ancho" value="@editCotization.AnchoProyecto" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>
    <div>
        <label for="calibre">Calibre:</label>
        <input type="text" id="calibre" name="calibre" value="@editCotization.Calibre" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>
    <div>
        <label for="material">Material:</label>
        <input type="text" id="material" name="material" value="@editCotization.TipoMaterial" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>
    <div>
        <label for="servicio">Servicio:</label>
        <input type="text" id="servicio" name="servicio" value="@editCotization.NombreServicio" @onchange="@((e) => handleChange(e,"usuarioId"))" readonly />
    </div>

    <button type="submit">Volver</button>
    </form>





@code {
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    public class Operario
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Email { get; set; }
        public int RolId { get; set; }
        public object Rol { get; set; }
        public object Cotizaciones { get; set; }

    }

    public class OperarioData
    {
        public List<Operario> Data { get; set; }
    }

    public class Cotization
    {
        public int Id { get; set; }
        public int ClienteId { get; set; }
        public int ProyectoId { get; set; }
        public int MaterialId { get; set; }
        public int ServicioId { get; set; }
        public double PrecioTotal { get; set; }
        public double PesoLamina { get; set; }
        public double PrecioMaterial { get; set; }
        public double PrecioServicio { get; set; }
        public int UsuarioId { get; set; }
        public bool CotizacionFinalizada { get; set; }
        public string Nombre { get; set; }
        public string Telefono { get; set; }
        public string Direccion { get; set; }
        public string Email { get; set; }
        public string Ubicacion { get; set; }
        public string DescripcionProyecto { get; set; }
        public string TipoMaterial { get; set; }
        public string NombreServicio { get; set; }
        public double LargoProyecto { get; set; }
        public double AnchoProyecto { get; set; }
        public double Calibre { get; set; }
    }

    public class Order
    {
        public int Id { get; set; }
        public int CotizacionId { get; set; }
        public string OperarioId { get; set; }
        public string NombreOperario { get; set; }
        public string FechaInicio { get; set; }
        public string FechaFin { get; set; }
        public int EstadoId { get; set; }
        public string Estado { get; set; }
    }

    public void handleChange(ChangeEventArgs e, string name)
    {
        if (name == "cotazation")
        {
            string inputValue = e.Value.ToString();
            editOrder.CotizacionId = Int32.Parse(inputValue);
            Console.WriteLine("Cambio el valor " + editOrder.CotizacionId);
        }

        if (name == "operario")
        {
            int id = Int32.Parse(e.Value.ToString());
            Operario oper = operarios.FirstOrDefault(item => item.Id == id);
            editOrder.OperarioId = oper.Id.ToString();
            editOrder.NombreOperario = oper.Nombre;
            Console.WriteLine("Operario" + editOrder.OperarioId + " " + editOrder.NombreOperario);

        }

        if (name == "fechaInicio")
        {
            string inputValue = e.Value.ToString();
            InitialDate = inputValue;
            DateTime fecha = DateTime.Parse(inputValue);
            string fechaFormateada = fecha.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
            editOrder.FechaInicio = fechaFormateada;
            Console.WriteLine("Fecha Inicio" + editOrder.FechaInicio);
        }

        if (name == "fechaFin")
        {
            string inputValue = e.Value.ToString();
            FinalDate = inputValue;
            DateTime fecha = DateTime.Parse(inputValue);
            string fechaFormateada = fecha.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
            editOrder.FechaFin = fechaFormateada;
            Console.WriteLine("Fecha Fin" + editOrder.FechaFin);
        }
        StateHasChanged();
    }

    private async Task backHome()
    {
        Navigation.NavigateToLogin("/ordenes");
    }
}
