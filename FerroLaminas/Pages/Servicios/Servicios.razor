@page "/servicios"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http
@using static FerroLaminas.Pages.FetchData
@using Newtonsoft.Json;
@using System.Text
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient httpClient

@code {
    private List<Server> servers;

    public class Rol
    {
        public int? Id { get; set; }
        public string Nombre { get; set; }
    }

    private Rol rol;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = new HttpClient();
        var path = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "path");
        //produccion
        //var response = await httpClient.GetAsync("https://apiferrolaminas.azurewebsites.net/api/Servicios");
        //desarrollo
         var response = await httpClient.GetAsync($"{path}/Servicios");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            servers = JsonConvert.DeserializeObject<List<Server>>(content);
            var response_rol = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "UserRol");
            rol = JsonConvert.DeserializeObject<Rol>(response_rol);
        }
        else
        {

        }
    }
}

<PageTitle>Ferro Laminas</PageTitle>

<h3 class="order-title">Servicios</h3>

@if (servers != null && rol != null)
{
    <table class="order-table table">
        <thead>
            <tr class="order-table-head">
                <th>ID</th>
                <th>Nombre</th>
                <th>Precio por Kilo</th>
                <th>Descripción</th>
                @if (rol.Nombre == "Administrador del sistema")
                {
                    <th>Editar</th>
                    <th>Eliminar</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var server in servers)
            {
                <tr class="order-table-body">
                    <td>@server.Id</td>
                    <td>@server.Nombre</td>
                    <td>@server.PrecioPorKilo</td>
                    <td>@server.Descripcion</td>
                    @if (rol.Nombre == "Administrador del sistema")
                    {
                        <td><a href="/servicios/@server.Id">Editar</a></td>
                        <td><a href="/servicios" @onclick="@(() => DeleteServer(server.Id))">Eliminar</a></td>                        
                    }
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <table class="order-table table">
        <thead>
            <tr class="order-table-head">
                <th>ID</th>
                <th>Nombre</th>
                <th>Precio por Kilo</th>
                <th>Descripción</th>
            </tr>
        </thead>
        <tbody>
            <tr class="order-table-body">
                <td>...</td>
                <td>...</td>
                <td>...</td>
                <td>...</td>

            </tr>
        </tbody>
    </table>
}

@if (rol != null && rol.Nombre == "Administrador del sistema")
{
    <button class="order-submit" type="button" @onclick='CrearServer'>Nuevo Servicio</button>
}

@code {
    public class Server
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public decimal PrecioPorKilo { get; set; }
        public string Descripcion { get; set; }
    }

    public class ServerData
    {
        public List<Server> Values { get; set; }
    }

    private string logoClass { get; set; }
    private string logoTextClass { get; set; }
    private string formClass { get; set; }
    private Timer timer { get; set; }

    // protected override void OnInitialized()
    // {
    //     logoClass = "logo-rotation";
    //     logoTextClass = "logo-text";
    //     formClass = "form-login-hiden";
    //     timer = new Timer(EjecutarTimeout, null, 2000, Timeout.Infinite);
    // }

    private async Task CrearServer()
    {
        Server nuevoServer = new Server();
        nuevoServer.Id = 8;
        nuevoServer.Nombre = "Servicio prueba";
        nuevoServer.PrecioPorKilo = 70;
        nuevoServer.Descripcion = "Este es un nuevo servicio";
        var httpClient = new HttpClient();
        var content = new StringContent(JsonConvert.SerializeObject(nuevoServer), Encoding.UTF8, "application/json");
        var path = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "path");
        //produccion
        //var response = await httpClient.PostAsync("https://apiferrolaminas.azurewebsites.net/api/Servicios", content);
        // desarrollo
         var response = await httpClient.PostAsync($"{path}/Servicios", content);

        if (response.IsSuccessStatusCode)
        {
            await OnInitializedAsync();
        }
        else
        {
        }
        StateHasChanged();
    }

    private async Task DeleteServer(int _id)
    {
        var httpClient = new HttpClient();
        var path = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "path");
        //produccion
       // var response = await httpClient.DeleteAsync("https://apiferrolaminas.azurewebsites.net/api/Servicios/" + _id);
        //desarrollo
         var response = await httpClient.DeleteAsync($"{path}/Servicios/" + _id);

        if (response.IsSuccessStatusCode)
        {
            await OnInitializedAsync();
        }
        else
        {
        }
        StateHasChanged();
    }

    // private void EjecutarTimeout(object state)
    // {
    //     logoClass = "logo";
    //     logoTextClass = "logo-text-hiden";
    //     formClass = "form-login";
    //     StateHasChanged();
    // }
}
